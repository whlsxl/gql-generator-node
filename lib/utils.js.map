{"version":3,"sources":["../src/utils.js"],"names":["moduleConsole","log","args","console","MODULE_NAME","warn","error","getFieldArgsDict","field","duplicateArgCounts","allArgsDict","path","reduce","o","arg","arg_name","join","name","index","length","getArgsToVarsStr","dict","Object","entries","map","varName","getVarsToTypesStr","type"],"mappings":";;;;;;;AAMA;;AANA;;;;;;AAQA;AACO,MAAMA,aAAa,GAAG;AAC5BC,EAAAA,GAAG,EAAE,CAAC,GAAGC,IAAJ,KACJC,OAAO,CAACF,GAAR,CAAa,IAAGG,sBAAY,QAA5B,EAAqC,GAAGF,IAAxC,CAF2B;AAG5BG,EAAAA,IAAI,EAAE,CAAC,GAAGH,IAAJ,KACLC,OAAO,CAACF,GAAR,CAAa,IAAGG,sBAAY,YAA5B,EAAyC,GAAGF,IAA5C,CAJ2B;AAK5BI,EAAAA,KAAK,EAAE,CAAC,GAAGJ,IAAJ,KACNC,OAAO,CAACF,GAAR,CAAa,IAAGG,sBAAY,UAA5B,EAAuC,GAAGF,IAA1C;AAN2B,CAAtB;AASP;;;;;;;;;;AAOO,MAAMK,gBAAgB,GAAG,CAC/BC,KAD+B,EAE/BC,kBAF+B,EAG/BC,WAAW,GAAG,EAHiB,EAI/BC,IAJ+B,KAM/BH,KAAK,CAACN,IAAN,CAAWU,MAAX,CAAkB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC7B,QAAMC,QAAQ,GAAI,GAAEJ,IAAI,CAACK,IAAL,CAAU,GAAV,CAAe,IAAGR,KAAK,CAACS,IAAK,IAAGH,GAAG,CAACG,IAAK,EAA7D;AACA;;AACA,MAAIF,QAAQ,IAAIN,kBAAhB,EAAoC;AACnCT,IAAAA,aAAa,CAACK,IAAd,CAAoB;;;IAApB;AAIA,UAAMa,KAAK,GAAGT,kBAAkB,CAACM,QAAD,CAAlB,GAA+B,CAA7C;AACAN,IAAAA,kBAAkB,CAACM,QAAD,CAAlB,GAA+BG,KAA/B;AACAL,IAAAA,CAAC,CAAE,GAAEE,QAAS,GAAEG,KAAM,EAArB,CAAD,GAA2BJ,GAA3B;AACA,GARD;AAQO;AAA2B,QAAIJ,WAAW,CAACK,QAAD,CAAf,EAA2B;AAC5Df,MAAAA,aAAa,CAACK,IAAd,CAAoB;;;IAApB;AAIAI,MAAAA,kBAAkB,CAACM,QAAD,CAAlB,GAA+B,CAA/B;AACAF,MAAAA,CAAC,CAACE,QAAD,CAAD,GAAcD,GAAd;AACA,KAPiC,MAO3B,IAAI,CAACH,IAAI,CAACQ,MAAV,EAAkB;AACxBN,MAAAA,CAAC,CAACC,GAAG,CAACG,IAAL,CAAD,GAAcH,GAAd;AACA,KAFM,MAEA;AACND,MAAAA,CAAC,CAACE,QAAD,CAAD,GAAcD,GAAd;AACA;;AACD,SAAOD,CAAP;AACA,CAxBD,EAwBG,EAxBH,CANM;AAgCP;;;;;;;;AAIO,MAAMO,gBAAgB,GAAGC,IAAI,IACnCC,MAAM,CAACC,OAAP,CAAeF,IAAf,EACEG,GADF,CACM,CAAC,CAACC,OAAD,EAAUX,GAAV,CAAD,KAAqB,GAAEA,GAAG,CAACG,IAAK,MAAKQ,OAAQ,EADnD,EAEET,IAFF,CAEO,IAFP,CADM;AAKP;;;;;;;;AAIO,MAAMU,iBAAiB,GAAGL,IAAI,IACpCC,MAAM,CAACC,OAAP,CAAeF,IAAf,EACEG,GADF,CACM,CAAC,CAACC,OAAD,EAAUX,GAAV,CAAD,KAAqB,IAAGW,OAAQ,KAAIX,GAAG,CAACa,IAAK,EADnD,EAEEX,IAFF,CAEO,IAFP,CADM","sourcesContent":["/* DOCUMENT INFORMATION\n\t- Author:   Dominik Maszczyk\n\t- Email:    Skitionek@gmail.com\n\t- Created:  2019-06-06\n*/\n\nimport { MODULE_NAME } from \"./constants\";\n\n/* istanbul ignore next */\nexport const moduleConsole = {\n\tlog: (...args) =>\n\t\tconsole.log(`[${MODULE_NAME} log]:`, ...args),\n\twarn: (...args) =>\n\t\tconsole.log(`[${MODULE_NAME} warning]:`, ...args),\n\terror: (...args) =>\n\t\tconsole.log(`[${MODULE_NAME} error]:`, ...args)\n};\n\n/**\n * Compile arguments dictionary for a field\n * @param field current field object\n * @param duplicateArgCounts map for deduping argument name collisions\n * @param allArgsDict dictionary of all arguments\n * @param path to current field\n */\nexport const getFieldArgsDict = (\n\tfield,\n\tduplicateArgCounts,\n\tallArgsDict = {},\n\tpath\n) =>\n\tfield.args.reduce((o, arg) => {\n\t\tconst arg_name = `${path.join('_')}_${field.name}_${arg.name}`;\n\t\t/* istanbul ignore next */\n\t\tif (arg_name in duplicateArgCounts) {\n\t\t\tmoduleConsole.warn(`\n\t\t\tI cannot find the case for these duplicates anymore,\n\t\t\tplease let me know if you are seeing this message.\n\t\t\t`);\n\t\t\tconst index = duplicateArgCounts[arg_name] + 1;\n\t\t\tduplicateArgCounts[arg_name] = index;\n\t\t\to[`${arg_name}${index}`] = arg;\n\t\t} else /* istanbul ignore next */ if (allArgsDict[arg_name]) {\n\t\t\tmoduleConsole.warn(`\n\t\t\tI cannot find the case for these duplicates anymore,\n\t\t\tplease let me know if you are seeing this message.\n\t\t\t`);\n\t\t\tduplicateArgCounts[arg_name] = 1;\n\t\t\to[arg_name] = arg;\n\t\t} else if (!path.length) {\n\t\t\to[arg.name] = arg;\n\t\t} else {\n\t\t\to[arg_name] = arg;\n\t\t}\n\t\treturn o;\n\t}, {});\n\n/**\n * Generate variables string\n * @param dict dictionary of arguments\n */\nexport const getArgsToVarsStr = dict =>\n\tObject.entries(dict)\n\t\t.map(([varName, arg]) => `${arg.name}: $${varName}`)\n\t\t.join(', ');\n\n/**\n * Generate types string\n * @param dict dictionary of arguments\n */\nexport const getVarsToTypesStr = dict =>\n\tObject.entries(dict)\n\t\t.map(([varName, arg]) => `$${varName}: ${arg.type}`)\n\t\t.join(', ');\n\n"],"file":"utils.js"}